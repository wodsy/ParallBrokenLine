//: Playground - noun: a place where people can play

import Foundation

class Point2D  {
    var x:Double = 0
    var y:Double = 0
    init(_ x:Double, _ y:Double){self.x=x; self.y=y}
    init( point:Point2D){x=point.x; y=point.y}
}

//func += (inout left:Point2D, right:Point2D )     { left.x+=right.x;left.y += right.y;}
func +  (left:Point2D, right:Point2D)->Point2D   { return Point2D(left.x+right.x, left.y+right.y)}
func -  (left:Point2D, right:Point2D)->Point2D   { return Point2D(left.x-right.x, left.y-right.y)}
func *  (left:Point2D, right:Point2D)->Double    { return left.x*right.x + left.y*right.y}
func *  (left:Point2D, value:Double )->Point2D   { return Point2D(left.x*value, left.y*value)}

// 自定义的向量差乘运算符号，
infix operator ** {}
func ** (left:Point2D, right:Point2D)->Double {return left.x*right.y - left.y*right.x}

var pList   = [Point2D]()  // 原始顶点坐标，  在initPList 函数当中初始化赋值
var dpList  = [Point2D]()  // 边向量dpList［i＋1］ － dpLIst［i］  在 initDPList函数当中计算后赋值
var ndpList = [Point2D]()  // 单位化的边向量，  在initNDPList函数当中计算后肤质， 实际使用的时候，完全可以用dpList来保存他们
var newList = [Point2D]()  // 新的折线顶点， 在compute函数当中，赋值

// 初始化顶点队列
func initPList(){
    pList  = [ Point2D(0,0),
               Point2D(0, 100),
               Point2D(100,100),
               Point2D(50,50),
               Point2D(100, 0),
             ]
}

// 初始化dpList  两顶点间向量差
func initDPList()->Void{
    print("计算dpList")
    var index  : Int
    for index=0; index<pList.count; ++index{
        dpList.append(pList[index==pList.count-1 ? 0: index+1]-pList[index]);
        print("dpList[\(index)]=(\(dpList[index].x),\(dpList[index].y))")
    }
}

// 初始化ndpList， 单位化两顶点向量差
func initNDPList()->Void{
    print("开始计算ndpList")
    var index=0;
    for ; index<dpList.count; ++index {
        ndpList.append( dpList[index] * ( 1.0 / sqrt(dpList[index]*dpList[index])));
        print("ndpList[\(index)]=(\(ndpList[index].x), \(ndpList[index].y))")
    }
}

// 计算新顶点，  注意参数为负是向内收缩， 为正是向外扩张
func computeLine(dist:Double)->Void{
    print("开始计算新顶点")
    var index = 0
    let count = pList.count;
    for ; index<count; ++index {
        var point:Point2D
        let startIndex = index==0 ? count-1 : index-1
        let endIndex   = index
        
        let sina = ndpList[startIndex] ** ndpList[endIndex]
        let length = dist / sina
        let vector = ndpList[endIndex] - ndpList[startIndex]
        point = pList[index] + vector*length
        newList.append(point);
        print("newList[\(index)] = (\(point.x),\(point.y))")
    }
}

// 整个算法的调用顺序
func run()->Void {
    initPList();
    initDPList()
    initNDPList()
    computeLine(-5)
}

run()
